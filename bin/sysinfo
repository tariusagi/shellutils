#!/bin/bash
# Version of this script. Use in usage statements and version tracking.
VERSION=0.1
# This script's full path name.
SCRIPT=$(readlink -f $0)
# This script's absolute directory (without trailing slash).
SCRIPT_DIR="$(dirname $SCRIPT)"
# This script's base name (file name only, without directory).
SCRIPT_NAME=$(basename $SCRIPT)

function show() {
	echo $*
	# Display on LCD server if $LCD_SERVER was defined.
	if [ -n "$lcd" ]; then
		echo Displaying on LCD server at $lcd:$port
		echo line${line} ${name:-$(hostname)}: $* | nc -w1 $lcd $port
		test -n "$interval" && sleep $interval || sleep 1
	else
		test -n "$interval" && sleep $interval
	fi
}

function get_ips() {
	local SHOW_IP_PATTERN="^[ewr].*|^br.*|^lt.*|^umts.*|^lan.*"
	local ips=()

	for f in /sys/class/net/*; do
		local intf=$(basename $f)
		if [[ $intf =~ $SHOW_IP_PATTERN ]]; then
			# Match only interface names starting with e (Ethernet), br (bridge), 
			# w (wireless), r (some Ralink drivers use ra<number> format)
			local tmp=$(ip -4 addr show dev $intf | awk '/inet/ {print $2}' | cut -d'/' -f1)
			[[ -n $tmp ]] && ips+=("$tmp")
		fi
	done

	echo ${ips[@]}
}

function get_load() {
	local load=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')
	echo CPU ${load}oC
}

function get_temp() {
	if [ -f /sys/class/thermal/thermal_zone0/temp ]; then
		local temp=$(($(cat /sys/class/thermal/thermal_zone0/temp)/1000))
	else
		local temp=??
	fi
	echo Temp ${temp}oC
}

function disk_usage() {
	# Use the first argument as the disk mount point to check.
	echo $1 $(df -h $1 | awk 'FNR==2{printf "%s/%s\n", $3, $2}')
}

function get_mem_usage() {
	echo Mem $(free -mw | awk '$1 == "Mem:" {print $3"/"$2"M"}') 
}

function get_uptime() {
	local UPTIME=$(LC_ALL=C uptime)
	local UPT1=${UPTIME#*'up '}
	local UPT2=${UPT1%'user'*}
	time=${UPT2%','*}
	time=${time//','}

	echo Up $time
}

function show_targets() {
	echo Showing $targets
	IFS=,
	for t in $targets; do
		case $t in
			ip)
				local ips=($(get_ips))
				for ip in "${ips[@]}"; do
					show $ip
				done
				;;
			load) show $(get_load) ;;
			temp) show $(get_temp) ;;
			mem) show $(get_mem_usage) ;;
			disk) for d in $mounts; do show $(disk_usage $d); done ;;
			up) show $(get_uptime);;
		esac
	done
	unset IFS
}

function on_exit() {
	show "Info N/A"
	exit
}

print_usage () {
	# Usage statements, use heredoc. Put all statements between "USAGE" lines.
	cat <<-USAGE
	$SCRIPT_NAME version $VERSION.
	Syntax: $SCRIPT_NAME [OPTIONS]
	Print system info one by one and optionally show on a LCD.
	Options:
	-h            Print this usage.
	-i sec        Seconds between metrics. Default none or 1 if show on a LCD.
	-m dir        Add mount point dir to list of disk usage report.
	-n name       Name of the system. Default is the hostname.
	-r            Repeat.
	-s host       Address of a LCD server.
	-p port       Port of a LCD server. Default is 1234.
	-t list       List of target info to show, separated by commas. Supported
								targets are up (means uptime), load, temp, mem, ip, disk. If
	              this option is omitted, all targets will be shown.
	-l num        Line to be printed on the LCD.
	USAGE
}

# Default settings.
line=1
port=1234
targets=up,load,temp,mem,ip,disk
mounts=/

# Now handle command line arguments based on predefined list. Refer to "getopts"
# document to understand this code.
while getopts "hi:l:m:n:p:rs:t:" opt; do
	case ${opt} in
	h ) print_usage; exit ;;
	i ) interval=$OPTARG ;;
	l ) line=$OPTARG ;;
	m ) mounts="$mounts $OPTARG" ;;
	n ) name=$OPTARG ;;
	p ) port=$OPTARG ;;
	r ) repeat=True ;;
	s ) lcd=$OPTARG ;;
	t ) targets=$OPTARG ;;
	\? )echo "ERROR: Invalid option \"$OPTARG\""; exit 2 ;;
	: ) echo "ERROR: Option \"$OPTARG\" requires an argument."; exit 3 ;;
	esac
done

if [ -n "$repeat" ]; then
	# Repeat.
	trap on_exit INT TERM
	while true; do
		show_targets
	done
else
	show_targets
fi
