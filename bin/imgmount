#!/bin/bash
# Version of this script. Use in usage statements and version tracking.
VERSION=0.1
# This script's full path name.
SCRIPT_FULLPATH="$(readlink -f $0)"
# This script's absolute directory (without trailing slash).
SCRIPT_DIR="$(dirname $SCRIPT_FULLPATH)"
# This script's base name (file name only, without directory).
SCRIPT_NAME="$(basename $SCRIPT_FULLPATH)"
# Path to ansilib.sh, which supports color text output.
ANSILIB_PATH=/usr/local/lib/ansilib.sh
detach() {
	# Detach given loop back image ($1) from device ($2). If $3 was given, unmount
	#	from it first.
	if [ -n "$3" ]; then
		umount "$3" || fatal "Failed to umount $3"
		rm -fr "$3"
		printc green "Unmount and remove $(printc hblue "$3") from $(printc hblue "$2")"
	fi
	sudo losetup -d $2 || fatal "Failed to detach $2"
	printc green "Detach $(printc hblue "$2") from $(printc hblue "$1")"
}

# Include ansilib and enable color support if possible.
if [ -f $ANSILIB_PATH ]; then
	color=yes
	. $ANSILIB_PATH
fi

# A fuction to print usage statements. Usage statements might be printed more
# than once, so it's better to make it a function.
print_usage () {
	# Usage statements, use heredoc. Put all statements between "USAGE" lines.
	if [ -z "$color" ]; then
		cat <<-USAGE
			$SCRIPT_NAME version $VERSION.
			Mount/unmount disk/partition image.
			Syntax: $SCRIPT_NAME [options] [<image dir>]
			Options:
			image           Path to the image. Must set dir to mount with it.
			dir             Mount point (a directory). Must set along with image.
			-d              Interactively detach and unmount existing loop back.
			-D              Detach and unmount all existing loop back devices.
			-h              Print this usage.
			-p n            Mount the "n"th partition in the image. Default is 1.
			-r              Mount in read-only mode.
			-v              Print this program version.
			USAGE
	else
		cat <<-COLORUSAGE
			$(ugreen $SCRIPT_NAME) version $(red $(yellow_bg $VERSION)).
			Mount/unmount disk/partition image.
			Syntax: $(green $SCRIPT_NAME) $(yellow [options]) [<image dir>]
			$(yellow Options:)
			image           Path to the image.
			dir             Mount point (a directory).
			-d              Interactively detach and unmount existing loop back.
			-D              Detach and unmount all existing loop back devices.
			-h              Print this usage.
			-p n            Mount the "n"th partition in the image. Default is 1.
			-r              Mount in read-only mode.
			-v              Print this program version.
			COLORUSAGE
	fi
}

# Check the number of given command line arguments.
if [[ $# -eq 0 ]]; then
	# No argument? Print a reminder.
	print_usage
	exit
fi

# Now handle command line option based on predefined list. Refer to "getopts"
# document to understand this code.
while getopts ":dDhp:rv" opt; do
	case ${opt} in
	d) detach=yes ;;
	D) detach_all=yes ;;
	h) print_usage; exit ;;
	p) part_no=$OPTARG ;;
	r) read_only='-r' ;;
	v) echo $SCRIPT_NAME version $VERSION; exit ;;
	\?) fatal 1 "Invalid option \"$OPTARG\"" ;;
	:) fatal 2 "Option \"$OPTARG\" requires an argument." ;;
	esac
done

# Remove processed arguments.
shift $((OPTIND-1))

# This script must be run as root/sudo.
if [ $(id -u) -ne 0 ]; then
	fatal 3 Require root/sudo privilege.
fi

# Force detach option if detach_all was set.
if [ -n "$detach_all" ]; then
	read -r -p "$(printc purple "Do you REALLY want to detach ALL [yN]? ")" answer
	case $answer in
		[yY]) detach=yes ;;
		*) exit ;;
	esac
fi

if [ -n "$detach" ]; then
	devs=$(ls /dev/loop*)
	loopbacks=0
	detached=0
	for dev in $devs; do
		# Find the image path.
		info=($(losetup $dev 2>/dev/null))
		if [ $? -ne 0 ]; then continue; fi
		let loopbacks+=1
		img=${info[2]}
		# Find the mount point. It can be empty if the image was not mounted.
		dir=$(grep $dev /proc/mounts | awk '{print $2}')
		if [ -n "$detach_all" ]; then
			# Detach all mode? Then just try detach and unmount this one.
			detach "$img" $dev "$dir"
			let detached+=1
		else
			if [ -z "$dir" ]; then
				printc "Found $(printc hblue $dev) attached to $(printc hblue "$img")"
			else
				printc "Found $(printc hblue $dev) mounted to $(printc hblue "$dir"), attached to $(printc hblue "$img")"
			fi
			prompt="$(printc yellow 'Do you want to detach it [yN]? ')"
			done=no
			while [ "$done" == "no" ]; do
				read -r -p "$prompt" answer
				case $answer in
					[yY]) detach "$img" $dev "$dir"; let detached+=1 done=true ;;
					[nN]) done=true ;;
				esac
			done
		fi
	done
	if [ $loopbacks -eq 0 ]; then
		printc No loopbacks found.
	else
		printc $detached/$loopbacks loop back devices were detached.
	fi
	exit
fi

# Check image file.
if [ $# -lt 2 ]; then
	fatal 4 Missing image file and/or mount point.
elif [ ! -f "$1" ]; then
	fatal 5 \"$1\" is not a file.
else
	img=$1
	dir=$2
	if [ ! -d "$dir" ]; then
		info \"$dir\" does not exist. Creating it...
		mkdir -p "$dir"
	fi
fi

# Analyze the image.
echo Analyzing image...
IFS=$'
'
parts=($(fdisk -l $img | grep -e "^Sector size" -e "^Device" -e "^$img"))

if [ ${#parts[@]} -lt 3 ]; then
	fatal 6 "This is not a valid image."
fi

n=0
for part in ${parts[@]}; do
	if [ $n -eq 0 ]; then
		sector_size=$(awk '{print $4}' <<<"$part")
		echo "Sector size: $sector_size bytes"
	elif [ $n -eq 1 ]; then
		IFS=' ' printc hwhite "Partitions list:"
		IFS=' ' printc uwhite "# $part           "
	else
		IFS=' ' echo "$((n - 1)) $part"
	fi
	let n+=1
done
unset IFS

if [[ -n "$part_no" && $part_no -gt 0 && $part_no -lt $((${#parts[@]} - 1)) ]]; then
	part=${parts[$((part_no + 1))]}
else
	# Ask for target partition.
	while true; do
		last=$((${#parts[@]} - 2))
		prompt="$(printc yellow Which partition to mount \(1-$last, Ctrl-C to cancel\)?) "
		read -r -p "$prompt" part_no
		if [[ $part_no -ge 1 && $part_no -le $last ]]; then
			part=${parts[$((part_no + 1))]}
			break
		else
			echo $part_no is invalid. Please choose again.
		fi
	done
fi

if [ -z "$read_only" ]; then
	printc Will mount partiton $(printc yellow $part_no) from $(printc hblue $img) to $(printc hblue $dir)
else
	printc Will mount $(printc yellow read-only) partiton $(printc yellow $part_no) from $(printc hblue $img) to $(printc hblue $dir)
fi

# Find a free loop device.
dev=$(losetup -f)
first_sector=$(awk '{print $2}' <<<"$part")
offset=$(($sector_size * $first_sector))
echo Attaching partition $part_no from sector $first_sector, offset $offset to $dev
losetup -o $offset $dev $img
if [ $? -ne 0 ]; then
	fatal 6 Failed to attach.
fi
mount $read_only $dev $dir
if [ $? -ne 0 ]; then
	fatal 7 Failed to mount.
fi
# printc green "Mounted to $(hblue $dir). You can start using it now."
printc green "Mounted to $dir. You can start using it now."
printc yellow "NOTE: Run \"sudo umount $dev\" then \"sudo losetup -d $dev\"" to detach.
