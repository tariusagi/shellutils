#!/bin/bash
# Version of this script. Use in usage statements and version tracking.
VERSION=0.2
# This script's full path name.
SCRIPT=$(readlink -f $0)
# This script's absolute directory (without trailing slash).
SCRIPT_DIR="$(dirname $SCRIPT)"
# This script's base name (file name only, without directory).
SCRIPT_NAME=$(basename $SCRIPT)

function pretty_num(){
	# Print a pretty_num with thousand separator.
	printf "%'d" $1
}

# This script must be run as root/sudo.
if [ $(id -u) -ne 0 ]; then
	>&2 echo ERROR: must run as root/sudo.
	exit 1
fi

# Default settings.
dev="/dev/mmcblk0"
name=$(hostname)

# A fuction to print usage statements. Usage statements might be printed more
# than once, so it's better to make it a function.
print_usage () {
	# Usage statements, use heredoc. Put all statements between "USAGE" lines.
	cat <<-USAGE
	$SCRIPT_NAME version $VERSION.
	Syntax: $SCRIPT_NAME [options] DEV DIR 
	Create a backup of DEV (such as /dev/mmcblk0) and put it into DIR. The backup can be shrinked using pishrink.sh and compressed with pigz.
	Options:
	-c         Compress backup image.
	-h         Print this usage.
	-f <name>  Name of the backup image. Default is the current hostname.
	-k         Keep original image after shrinking or compressing.
	-l n       Limit size to expand the rootfs during first boot. See "size" argument of the size2fs command. Ex: "-l 4.5G".
	-n         Don't expand filesystem when image is booted the first time
	-p         Purge redudant files (logs, apt archives, temp...).
	-s         Shrink backup image.
	-v         Print this program version.
	NOTE: 
	- This script requires root/sudo privilege.
	- This script requires pishrink.sh from https://github.com/tariusagi/PiShrink.git. Download and put it in root's PATH (such as /usr/local/bin/) before running this script.
	- Timestamp will be appended to backup file name automatically.
	USAGE
}

# Check the pretty_num of given command line arguments.
if [ $# -eq 0 ]; then
    # If there's no argument, print the usage statements then exit immediately.
    print_usage
    exit
fi

# Now handle command line arguments based on predefined list. Refer to "getopts"
# document to understand this code.
while getopts "cf:hkl:npsv" opt; do
    case ${opt} in
    c) compress=yes ;;
    f) name=$OPTARG ;;
    h) print_usage; exit ;;
    k) keep_img=yes ;;
    l) limit_size=$OPTARG ;;
    n) noexpand='-n' ;;
		p) shrink=yes; purge='-p' ;;
    s) shrink=yes ;;
    v) echo $SCRIPT_NAME version $VERSION; exit ;;
    \?)>&2 echo "ERROR: Invalid option \"$OPTARG\""; exit 2 ;;
    :) >&2 echo "ERROR: Option \"$OPTARG\" requires an argument."; exit 3 ;;
    esac
done

# Remove processed arguments.
shift $((OPTIND-1))

if [ $# -lt 2 ]; then
	>&2 echo ERROR: Missing device and/or target directory.
	exit 4
else
	if [ ! -b "$1" ]; then
		>&2 echo ERROR: Block device \"$1\" does not exist.
		exit 5
	fi
	if [ ! -d "$2" ]; then
		>&2 echo ERROR: Directory \"$2\" does not exist.
		exit 6
	fi
	dev=$1
	dir=${2%/}
fi

# Append current timestamp and the .img extension to the file name.
name="$name-$(date +%Y%m%d_%H%M%S)"

echo Block device: $dev
echo Image name: $name
echo Target directory: $dir

test -n "$shrink" && echo Will shrink image.
test -n "$purge" && echo Will purge redundant data before shrinking.
test -n "$compress" && echo Will compress image.
test -n "$keep_img" && echo Will keep uncompressed image.
test -n "$limit_size" && echo Will limit rootfs size to $limit_size.

# List of dependencies.
DEP="parted pv pigz losetup tune2fs md5sum e2fsck resize2fs pishrink.sh"

# Check dependencies first.
for d in $DEP; do
	path="$(which ${d})"
	if [ -z "$path" ]; then
		echo $d command not found. Please install it first.
		exit 7
	fi
done

# Begin the backup process.
sync; sync

sector_size=$(sudo fdisk -l $dev | grep 'Sector size' | awk '{print $7}')
echo "Sector size:    $sector_size"
size=$(fdisk -l $dev | grep ^$dev | awk 'END {print $3}')
sd_size=$((size * $sector_size))
echo "Total sectors:  $(pretty_num $size)"
echo "Total size:    " $(pretty_num $sd_size) "bytes"
echo Backing up $dev \($(pretty_num $(($sd_size/1024**2))) MB\) to \"$dir/$name.img\"...
pv -tpreb $dev -S -s $sd_size | dd of="$dir/$name.img" bs=1M conv=sync,noerror iflag=fullblock

if [ $? -eq 0 ]; then
	echo Backup image was created.

	if [ -n "$shrink" ]; then
		# Shrink.
		echo Shrink the image.
		if [ -n "$limit_size" ]; then
			pishrink.sh -d $purge $noexpand -l $limit_size "$dir/$name.img"
		else
			pishrink.sh -d $purge $noexpand "$dir/$name.img"
		fi
		if [ $? -ne 0 ]; then
			>&2 echo ERROR: Failed to shrink.
			test -f "$dir/$name.img" && rm -f "$dir/$name.img"
			exit 9
		fi
	fi

	if [ -n "$compress" ]; then
		# Compress.
		echo Compress the image.
		img_size=$(stat --printf="%s" "$dir/$name.img") 
		pv -tpreb -s $img_size "$dir/$name.img" | pigz -n9 > "$dir/$name.img.gz"
		if [ $? -ne 0 ]; then
			>&2 echo ERROR: Failed to compressed.
			test -f "$dir/$name.img.gz" && rm -f "$dir/$name.img.gz"
			exit 10
		fi
		if [ -z "$keep_img" ]; then
			echo Remove uncompressed image.
			rm -f "$dir/$name.img"
		fi
	fi

	sync

	if [ -z "$compress" ] || [ -n "$keep_img" ]; then
		test -n "$shrink" && echo Shrunk image: || echo Original image:
		ls -lh "$dir/$name.img"
	fi

	if [ -n "$compress" ]; then
		echo Compressed image: && ls -lh "$dir/$name.img.gz"
	fi

	echo All done.
else
	>&2 echo ERROR: Failed to create backup image.
	rm -f "$dir/$name.img"
	exit 8
fi
